:PROPERTIES:
:ID:       86f3c13a-4dd2-42ca-9a56-03ea56368aac
:END:
#+title: cities (code base, Observatorio Fiscal)
* refs
  https://github.com/ofiscal/cities
  https://github.com/ofiscal/cities-output
* TODO understand and use [[id:8775876f-9a10-4b3d-ac04-43cab48203d9][CUIPO data]]
* BLOCKED on other people
** TODO can we get new [2023, updated from 2019] regalias data?
   See these files:
     data/2019/regalias/muni.csv
     Code/build/regalias.py
** TODO how to get deuda info?
   Is it in the deuda columns?
   I only want payment toward the debt.
   Maybe it's in one of the gastos files now? If so, under what item code?
** TODO ask someone to verify the set of codes we're using
   :PROPERTIES:
   :ID:       2b712914-221d-471e-b2ed-d962e4a0fabb
   :END:
   as coded in Code/build/classify_budget_codes.py
* TODO Generalize years.
** in build/
*** the problem
    The latest build stages compute an average from 2015 onward.
    Therefore that number appears in these files:
      build/budget_6p7_avg_muni.md
      build/budget_6p7_avg_muni.py
      build/budget_9_static_compare.py
      draw/chart_content.py
    That made sense in 2019, but what to do now?
*** TODO Also generalize, I think, the 3 in `get_muni_year_count`.
    defined in `Code/build/budget_6p7_avg_muni.py`.
    It's probably meant as a count of years 2016, 2017 and 2018.
** in draw/
*** This quote appears twice in it.
    text = ["Se muestra el acumulado de los ingresos de esta " +
            "administración (2015 a 2018) en cada sector."],
*** I think there are others.
** write year window data
   Do something like this, and save the resulting range,
   as a small muni-specific data set --
   maybe a one row, two column frame, or (more naturally) a series.
**** code
     import Code.build.budget_9_static_compare_lib as lib

     for s in s4.series: # Compute min, max year for each space slice in dfs0.
       # PITFALL: This is a little wasteful -- it computes min and max year
       # four times per municipality. But moving it upstream would be hard.
       for stat in ["min","max"]:
         dfs1 [s.name] = lib.compute_stat_of_year_per_space_slice (
           space_cols = ["dept code","muni code"],
           stat = stat,
           df = dfs1 [s.name] )
* TODO check all "TODO" items in code.
* TODO check that the new code does not materially differ for 2019
  Run it and the old code on the 2019 data;
  compare results with .describe().
* TODO check that results for 2023 are not crazy different from 2019
  esp. that for years they have in common,
  they are nearly identical
* TODO update for 2023
** Update data/sisfut/csv.
   That's what's used in budget_0_*.py
*** use new wide format for sisfut data
** Update data/regalias/*.csv
   That's 2 data sets, `muni` and `dept`.
** Determine whether output/keys/* need to change.
** Verify that the categories still mean the same thing.
   The dictionary I wrote is here:
   ~/of/cities/Code/build/classify_budget_codes.py
** restore integration tests
   Code/integ_tests/
** add Indice de Desempeño Fiscal to cities
   available from SISFUT
   The new methodology might not be available for recent years.
** DONE
*** [[id:30310432-6fe1-48ce-8bba-a5c77daf8b74][Split the data flow by 2019 | 2023 \\ ofiscal / cities]]
*** Makefile problems
**** Why is sample_tables running?
**** Why are some paths being read as files at /?
     They should be deeper in the tree.
* TODO maybe fill holes in SISFUT with CHIP data
  but it's much more raw
* some names for some spending categories
** debt = amortizaciones + pago de intereses
*** amortizaciones = payment of capital component of debt
*** pago de intereses = payment of interest
