#+title: putting tax.co online
* TODO in tax.co
** DONE take .json inputs
*** make a new branch, "online"
*** add a new Makefile argument
    the config.json file
*** define usage in a comment of make.py
*** use config.json to define the standard Makefile arguments
    subsample=$1
    regime_year=$regime_year
    strategy=$strategy
*** merge common* programs
    I don't need to split the command line and the repl any more.
    And I need the definition of common.valid_* to work from both contexts.
*** test that it ingested properly
    I can first leave all the Makefile recipes that use the command line-defined arguments in place. They don't need to use config.json yet. Instead just add a recipe that calls a new .py file that reads the json, defines some variables, and prints them to screen.
*** rewrite extant Makefile recipes
    to use config.json and ignore the earlier Makefile arguments
*** change these files to only use the full sample
**** DONE python/build/ss_functions_test.py
**** DONE python/build/people_2_buildings.py
**** DONE python/build/purchases/input_test.py
**** DONE python/regime/r2018_test.py
**** DONE python/build/buildings_test.py
*** add a config param: VAT schedules (spreadsheet)
*** add tests for spreadsheet valididty
*** accept either .xlsx or .csv format
** csv-dynamic income tax regimes
   :PROPERTIES:
   :ID:       1d3000ca-5771-4495-9632-099b606c277c
   :END:
*** only for regime 2019
*** Haskell: share libraries
*** generate working Python
*** turn CSV into a [Formula]
**** validateTable should be called in tableToMoneyBrackets
     not in csvToPython
*** clear out those ", proposed" variables
*** build an executable, callable from shell, with command-line args
    for translating a .csv file
*** duplicate the hard-coded functions with some .csv-dynamic ones
**** make the .csv files' location a config param
     That location should have each of the files needed --
     most_income.csv, dividend.csv, etc.
**** keep .csv and generated .py under python/csv-dynamic
     Some of the .csv can be permanent.
**** build, execute a dynamic import statement
     It can be executed with `exec`,
       which is type String -> IO ().
     It imports the needed .csv-generated .py files.
     It is executed in python/regime/r2019.py.
*** test that they give the same answers
*** then delete the hard-coded 2019 functions
*** TODO Ponder: Why was this so much harder than expected?
** TODO generate pictures
*** decide which to draw
*** code drawing them
*** patch that into the website
** Makefile must catch all changes
   :PROPERTIES:
   :ID:       306f0e24-363e-4a61-99b3-0ef3028c57f1
   :END:
*** details
   Inc. changes to the user-supplied .csv files,
   on which (only?) r2019 depends.
*** recursive import tracing
    Can I encode the imports of a program as a recipe that does nothing,
    to ensure that it is re-run whenever any of those imports changes,
    without having to list dependencies of dependencies in each recipe
    that actually does something?
*** BLOCKED add Haskell files
    Adding them to make/deps is easy.
    The hard part is using them in make/build.
** solve memory, time constraints, cron job
   :PROPERTIES:
   :ID:       c3c33450-e196-4116-be1e-7b253bc68391
   :END:
*** choose optimal wait
    Promise to respond within 2 hours,
    and to hold the results for at least 1 hour after making them.
    If space for 10 users, then actually the response will always come in at most 100 minutes, and the data will stay for at least 100 minutes.
    If no new users bump the space, they might stay longer.
*** compute hash of email address
    This will be treated like a user name.
*** NEXT all* output should go to a specific user's folder
    * except the subsample, which is slow and extremely initial
**** places to change to_csv
     report/overview.py
     build/output_io
*** add new user to db of requests
**** sort  : time of request
**** field : hash of email
**** field : time of requests
**** field : time of results
     often missing
*** maintain a .json file of spacetime params
    data/constraints-time-memory.json
*** The program will have to use `dh` from the shell.
*** Makefile: smart within user
    It won't recreate data products unnecessarily when I'm testing.
*** incorporate requests_test.py into Makefile
* TODO in Django
** DONE solve Django bug: filesystem not always written to
*** forum question
    https://forum.djangoproject.com/t/view-only-sometimes-writes-to-filesystem/6799
*** where the bug happens
The last commit that works:
  89a231c3bda51c3e245e1991a57b1b3f814cd3be
The first that fails:
  cb0e71e9ee3b3f9253cf2c21e376c7759e3ef6f0
** DONE send data to tax.co
*** create folder with name = hash of user email
*** insert json spec
*** rename ingest_spec -> ingest_json
    and move it to "examples",
    and then start on "ingest_spec", which ingests both json and tables
*** factor out functions from ingest_json
    The one that makes the user folder if needed,
    and writes the json config data to it.
*** insert spreadsheets
**** in upload_multiple.html, read list of table names
     from the calling Django view.
**** make spreadsheets in tax.co shareable
     Move them to to-serve/,
     and simlink their original locations to the new ones.
     Then run tax.co to make sure they work.
**** configure Apache to find tax.co spreadsheets
**** Allow download of default spreadsheets.
**** handle the case of an invalid spec form
     in ingest_full_spec
     The trick was to populate  the optional "choices" fields of the Model elements.
**** rearrange file tree
     I want the user to have free access to tax.co,
     but not to any secret keys in, say, web/.
**** use symlinks for files not uploaded.
     It could be that the user's folder always has a file for every uploadable table, but that in the event that they don't upload it, that file is a symlink.
     This simplifies the config file -- no need to indicate where the files are, becuase they're always there -- and doesn't have much effect + or - on the simplicity of the code that puts the files there.
**** remove some now-obsolete shell.json params
 "vat_by_coicop"         : "data/vat/vat-by-coicop.csv",
 "vat_by_capitulo_c"     : "data/vat/vat-by-capitulo-c.csv",
 (and change all the code that used to depend on those,
 to use the symlinks instead)
**** ? move the spec to a subfolder
     of the user folder called spec/
     where "the spec" includes all uploaded tables too.
**** handle the case that an uploaded file already exists
** TODO ? split email address from other details
   (When I first tried fixing this problem something went wrong I didn't understand.)
   It's mandatory and obvious, whereas the rest are optional and esoteric.
     Therefore they deserve a preamble, but it doesn't.
** TODO determine whether, when to run
*** CANCELED change import path to see the db functions
    Hard to do. Instead, call tax.co/python/requests from tax.co.web
*** DONE split tax.co/python/requests.py into lib, tests, main
*** DONE on each run of the view: add request to tax.co/data/requests.csv
*** DONE the code expects vat_by_c*, not vat-by-c*
    That is, underscores, not dashes.
    So change all the filenames accordingly.
    Also change the READMEs (plural) in data/vat
*** DONE NEXT get try-to-advance to work in the repl
*** DONE NEXT get try-to-advance to work from the shell
**** IMPORTANT: DON"T MESS WITH tax.co/master
     because tax.co/web has unsaved changes,
     some for debugging and maybe some that fix bugs
**** do it from within tax_web docker container
**** may need to os.chdir to /mnt/tax_co
     once running python from a different python
*** TODO bugfix: delete the oldest *extant* user
    Call it liek this
    (but change the value "4" to whatever is appropriate).

    PYTHONPATH=/mnt/tax_co/		    \
      /opt/conda/bin/python3.8		    \
      /mnt/tax_co/python/requests/main.py   \
      /mnt/tax_co/users/4/config/shell.json \
      try-to-advance
*** DONE fix: view currently doesn't trigger add-to-requests
    and yet this works from anywhere in the shell (in the docker container):
  PYTHONPATH=/mnt/tax_co/                                               \
  python3                                                               \
  /mnt/tax_co/python/requests/main.py                                   \
  /mnt/tax_co/users/972411cda1a01ae85f6c36b1b68118c3/config/shell.json  \
  add-to-queue
*** DONE clean requests/main.py
  Change _file and _folder to _path.
    This makes searching easier.

  In advance_request_queue, don't redefine tax_root.
*** TODO enable .xlsx upload
**** keep original filename extensions
     Currently the symlink always ends in .csv,
     even though the file itself might end in .xlsx.
*** TODO move all file definitions to dedicated files.py files
    In both web/../views/ and tax/../request/
**** more places?
     in ~/of/webapp/django/run_make/views/lib.py,
     in the function append_request_to_db().
     Also in tax.co/python/requests/.
*** DONE change os.system calls to subprocess.run calls
    can model on tax.co/python/requests/main.py
*** DONE how to advance requests (on cron's time)
**** THINKING: unused functions
***** delete_oldest_user_folder
***** gb_used
***** memory_permits_another_run
***** delete_oldest_request
***** at_least_one_is_old
***** unexecuted_requests_exist
**** the work
     See if unexecuted requests exist.
     If so, see if it can be run yet.
     If there's room for another already, run the oldest unexecuted request.
     If there's no room, but some request is old enough to be deleted,
     then delete it from requests.csv and users/,
     and then run the oldest unexecuted request.
     Once the request has executed, mark it complete.
*** DONE ! introduce a memory lock
**** the filelock library seems good
     https://pypi.org/project/filelock/
     https://stackoverflow.com/a/498505/916142
**** strategy
***** temporarily hold new requests in a briefly-accessed file
      Keep a file next to requests.csv called requests.new.csv.
      Each time a user submits a request,
      add it to requests.new.csv, rather than requests.csv.
      Each time the cron job runs, it transfers from requests.new.csv to requests.csv.
      The advantage of this is that the file is never needed for very long, so no process will meaningfully block another.
***** only the cron job accesses requests.csv
**** DONE stale
***** why
     Otherwise one instance of the cron job could clobber another,
     or a user request could be missed
     because the cron job held an earlier copy of requests.csv.
***** if I were to DIY it
****** To lock a file,
       save a file of the same name with ".lock" appended. Optionally, write in the file the reason it's locked.
****** To unlock a file,
       delete the lock. But don't do that unless the lock is yours.
****** To wait on a file
       See if the file is locked.
       If so, wait a given (as an argument) number of seconds.
*** TODO Assume they want the earlier request deleted.
    Provide a message explaining that's what happens.
*** TODO why did I think I needed [[file:../tech/20210414161239-jq_shell_command.org][jq (shell command)]]?
** TODO show Makefile errors if build fails
   :PROPERTIES:
   :ID:       1c9cef73-d495-4735-a789-2daf051c9beb
   :END:
*** convey exit status to webapp
*** write error to a file
*** find, display that error file in the webapp
** TODO email URL to user
** TODO test email addresses with strange characters
** TODO calibrate time, memory constraints
   in data/constraints-time-memory.json
   To get the time right, will need to be using the server.
* ? In Docker image, customize further [[id:dcc41642-ba24-45b8-bf55-daf08d7f701e][for Apache]] and [[file:../tech/20201014163254-wsgi.org][wsgi]]
* TODO integrate tax.co and the web app
  :PROPERTIES:
  :ID:       f94012e6-e4ad-4e3a-bd68-d3a82fb165de
  :END:
** user downloads .csv
** user uploads .csv, inputs .json
** tax.co finds user input
** tax.co runs
** tax.co informs webapp if, when it finishes
** webapp emails user that it's ready, sends link
** webapp finds, presents tax.co output
* [[id:8949db07-95ac-44c8-9b7b-78d565c1943d][before production run, do web security stuff]]
* DONE find a server
** chosen: [[file:../tech/aws.org][AWS]]
** a cheap-looking bare-metal server rental
   https://gthost.com/bare-metal-server/
** [[file:20210414144055-javeriana_dti_getting_them_to_serve_the_tax_co_microsimulation_website.org][Javeriana DTI: getting them to serve the tax.co microsimulation website]]
* TODO deploy to server
  :PROPERTIES:
  :ID:       6c1cd107-bffa-4ef2-879b-8adc1bbf942b
  :END:
** DONE package the docker images
*** where I put it
    ~/tax_co.docker.tar
*** how
    https://stackoverflow.com/a/28364045/916142
*** why: speed
    Uploading such a .tar file from my home machine to the server will be much faster than downloading it from DockerHub onto the server.
** TODO set up the instance
*** DONE start an EC2 instance
**** the config I'm trying
***** AMI: Amazon Linux 2
***** Instance type: 16 GB RAM
***** configure: do nothing
      "hibernation" is an option, but it requires an HD big enough to store the RAM in addition to whatever I want in "colder" storage.
***** storage
      16 GB HD
        The Docker image iself is 7.1 GB.
	Eventually I'll want even more, but later.
***** Configure Security Group
      All of these accessible from anywhere
        (not "My IP", and not "Custom", whatever that is).
      SSH (default), which (I think) means* port 22
      HTTP (added), which (I think) means* port 80
      HTTPS (added), which (I think) means* port 443
*** DONE login
    ssh -i ~/code/aws/secret/2021-04-14.1.pem ec2-user@18.231.152.118
*** DONE associate a domain name with the EC2 instance
    https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-ec2-instance.html
**** get the IPv4 Public IP address for the EC2 instance
     18.231.152.118
**** in Route53
     Go to that domain.
     Choose Create Record.
*** DONE install docker, emacs, git
    sudo yum install -y docker emacs git
**** first time I tried, all docker dependencies were already installed
    sudo yum install -y yum-utils device-mapper-persistent-data lvm2
*** DONE transfer from home machine
    scp takes a long time for big files.
**** ~/tax_co.docker.tar
     scp -i ~/code/aws/secret/2021-04-14.1.pem ~/tax_co.docker.tar ec2-user@18.231.152.118:~
     docker load -i tax_co.docker.tar
**** ~/of/webapp.zip
     scp -i ~/code/aws/secret/2021-04-14.1.pem ~/of/webapp.zip ec2-user@18.231.152.118:~
     unzip webapp.zip
**** ~/of/tax.co/web.zip
     scp -i ~/code/aws/secret/2021-04-14.1.pem ~/of/tax.co/master.zip ec2-user@18.231.152.118:~
     unzip master.zip
     mv master tax.co
*** DONE configure Docker not to need sudo
    sudo usermod -aG docker ec2-user
    then close ssh and ssh back in
*** DONE set up Git in the new environment
  git config --global core.editor "emacs -nw"
    # -nw: use Emacs at the command line (not via the gui)
    # Maybe not necessary in a GUIless system.
  Copy /.ssh/id_rsa from my home system to the new system.
  Add my user name and email (Git will say how when I try to push).
*** MAYBE DONE configure filepaths
**** Take notes here of what needs changing.
     webapp/commands.sh
       change jeff -> ec2-user
**** Eventually make those changes programmatic.
*** configure Apache
**** DONE try adding a port number to my request
     Beware that the port number outside the container might map to a different one inside the container.
     Edit ports.conf, add it (eventually) to git@github.com:ofiscal/tax.co.web.git
*** TODO start apache as root
    I can't serve to the internet unless I do that,
    which means I need to start the docker container as root:
      docker exec -it -u 0 webapp bash
*** DONE if this works, add it to tax.co.web
**** rewrite link.sh
to_replace = apache2.conf ports.conf
away=/etc/apache2
home=/mnt/apache2

for i in to_replace; do
    rm    $away/$target
    ln -s $home/$target $away/$target
*** DONE visit this URL
    http://sim.jefbrown.net/myapp/run_make/write_time
      based on this
        http://localhost:8000/myapp/run_make/write_time
** TODO test some capabilities
*** DONE test: stop, reboot, restart
    Doing this changes the instance's public IP address.
** TODO fix blockers
*** cannot download models from myapp/run_make/ingest_full_spec
* TODO ponder
** Keep a db of requests?
   It seems like the "right" thing to do,
   but at the same time it's work for no obvious immediate gain.
** Cache results: hard problem
*** Hash each submitted configuration
    Based on tax config spec but not email address,
    so that if two people submit the same request,
    it'll be obvious.
*** Keep a db matching request hashes to (requests and) data products.
*** The Makefile recipes are for simlinks.
    Each request (a set greater than each hash-equivalent request)
    lives in its own folder. The Makefile creates simlinks from that folder
    to the "data products" folder.
*** When a request is made,
    the python code looks up whether
** Ponder: idle user time, parallelism
   Should the website pause while the model is computed?
